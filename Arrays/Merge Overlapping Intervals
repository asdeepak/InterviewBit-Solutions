/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool compare(Interval i1,Interval i2){

    return i1.start < i2.start ? true : false;    
}

vector<Interval> Solution::merge(vector<Interval> &A) {
    
    sort(A.begin(),A.end(),compare);
    int n  = A.size();
    //for(int i = 0;i < n;++i)
      //  cout << A[i].start << '|' << A[i].end << " ";
    
    vector<Interval> v;
    v.push_back(A[0]);
    int j = 0;
    int m = A[0].end;
    for(int i = 1;i < n;++i){
        if(m >= A[i].start && m < A[i].end){
            v[j].end = A[i].end;
            m = A[i].end;
        }
        else if(m >= A[i].start)
            continue;
            else{
                j++;
                v.push_back(A[i]);
                m = A[i].end;
            }
            
        
            
    }
    
    return v;
}
